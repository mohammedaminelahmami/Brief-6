{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n  // Handle the case where an argument is provided as camel case, e.g., fooBar.\n  // by ensuring that the string isn't already mixed case:\n  const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n\n  if (!isCamelCase) {\n    str = str.toLowerCase();\n  }\n\n  if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n    return str;\n  } else {\n    let camelcase = '';\n    let nextChrUpper = false;\n    const leadingHyphens = str.match(/^-+/);\n\n    for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n      let chr = str.charAt(i);\n\n      if (nextChrUpper) {\n        nextChrUpper = false;\n        chr = chr.toUpperCase();\n      }\n\n      if (i !== 0 && (chr === '-' || chr === '_')) {\n        nextChrUpper = true;\n      } else if (chr !== '-' && chr !== '_') {\n        camelcase += chr;\n      }\n    }\n\n    return camelcase;\n  }\n}\nexport function decamelize(str, joinString) {\n  const lowercase = str.toLowerCase();\n  joinString = joinString || '-';\n  let notCamelcase = '';\n\n  for (let i = 0; i < str.length; i++) {\n    const chrLower = lowercase.charAt(i);\n    const chrString = str.charAt(i);\n\n    if (chrLower !== chrString && i > 0) {\n      notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n    } else {\n      notCamelcase += chrString;\n    }\n  }\n\n  return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n  if (x === null || x === undefined) return false; // if loaded from config, may already be a number.\n\n  if (typeof x === 'number') return true; // hexadecimal.\n\n  if (/^0x[0-9a-f]+$/i.test(x)) return true; // don't treat 0123 as a number; as it drops the leading '0'.\n\n  if (/^0[^.]/.test(x)) return false;\n  return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}","map":{"version":3,"sources":["C:/Users/YC/Desktop/brief6-frontend/node_modules/yargs-parser/build/lib/string-utils.js"],"names":["camelCase","str","isCamelCase","toLowerCase","toUpperCase","indexOf","camelcase","nextChrUpper","leadingHyphens","match","i","length","chr","charAt","decamelize","joinString","lowercase","notCamelcase","chrLower","chrString","looksLikeNumber","x","undefined","test"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AAC3B;AACA;AACA,QAAMC,WAAW,GAAGD,GAAG,KAAKA,GAAG,CAACE,WAAJ,EAAR,IAA6BF,GAAG,KAAKA,GAAG,CAACG,WAAJ,EAAzD;;AACA,MAAI,CAACF,WAAL,EAAkB;AACdD,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAJ,EAAN;AACH;;AACD,MAAIF,GAAG,CAACI,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,IAA2BJ,GAAG,CAACI,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAArD,EAAwD;AACpD,WAAOJ,GAAP;AACH,GAFD,MAGK;AACD,QAAIK,SAAS,GAAG,EAAhB;AACA,QAAIC,YAAY,GAAG,KAAnB;AACA,UAAMC,cAAc,GAAGP,GAAG,CAACQ,KAAJ,CAAU,KAAV,CAAvB;;AACA,SAAK,IAAIC,CAAC,GAAGF,cAAc,GAAGA,cAAc,CAAC,CAAD,CAAd,CAAkBG,MAArB,GAA8B,CAAzD,EAA4DD,CAAC,GAAGT,GAAG,CAACU,MAApE,EAA4ED,CAAC,EAA7E,EAAiF;AAC7E,UAAIE,GAAG,GAAGX,GAAG,CAACY,MAAJ,CAAWH,CAAX,CAAV;;AACA,UAAIH,YAAJ,EAAkB;AACdA,QAAAA,YAAY,GAAG,KAAf;AACAK,QAAAA,GAAG,GAAGA,GAAG,CAACR,WAAJ,EAAN;AACH;;AACD,UAAIM,CAAC,KAAK,CAAN,KAAYE,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAAnC,CAAJ,EAA6C;AACzCL,QAAAA,YAAY,GAAG,IAAf;AACH,OAFD,MAGK,IAAIK,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,GAA3B,EAAgC;AACjCN,QAAAA,SAAS,IAAIM,GAAb;AACH;AACJ;;AACD,WAAON,SAAP;AACH;AACJ;AACD,OAAO,SAASQ,UAAT,CAAoBb,GAApB,EAAyBc,UAAzB,EAAqC;AACxC,QAAMC,SAAS,GAAGf,GAAG,CAACE,WAAJ,EAAlB;AACAY,EAAAA,UAAU,GAAGA,UAAU,IAAI,GAA3B;AACA,MAAIE,YAAY,GAAG,EAAnB;;AACA,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,GAAG,CAACU,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,UAAMQ,QAAQ,GAAGF,SAAS,CAACH,MAAV,CAAiBH,CAAjB,CAAjB;AACA,UAAMS,SAAS,GAAGlB,GAAG,CAACY,MAAJ,CAAWH,CAAX,CAAlB;;AACA,QAAIQ,QAAQ,KAAKC,SAAb,IAA0BT,CAAC,GAAG,CAAlC,EAAqC;AACjCO,MAAAA,YAAY,IAAK,GAAEF,UAAW,GAAEC,SAAS,CAACH,MAAV,CAAiBH,CAAjB,CAAoB,EAApD;AACH,KAFD,MAGK;AACDO,MAAAA,YAAY,IAAIE,SAAhB;AACH;AACJ;;AACD,SAAOF,YAAP;AACH;AACD,OAAO,SAASG,eAAT,CAAyBC,CAAzB,EAA4B;AAC/B,MAAIA,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKC,SAAxB,EACI,OAAO,KAAP,CAF2B,CAG/B;;AACA,MAAI,OAAOD,CAAP,KAAa,QAAjB,EACI,OAAO,IAAP,CAL2B,CAM/B;;AACA,MAAI,iBAAiBE,IAAjB,CAAsBF,CAAtB,CAAJ,EACI,OAAO,IAAP,CAR2B,CAS/B;;AACA,MAAI,SAASE,IAAT,CAAcF,CAAd,CAAJ,EACI,OAAO,KAAP;AACJ,SAAO,4CAA4CE,IAA5C,CAAiDF,CAAjD,CAAP;AACH","sourcesContent":["/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nexport function camelCase(str) {\n    // Handle the case where an argument is provided as camel case, e.g., fooBar.\n    // by ensuring that the string isn't already mixed case:\n    const isCamelCase = str !== str.toLowerCase() && str !== str.toUpperCase();\n    if (!isCamelCase) {\n        str = str.toLowerCase();\n    }\n    if (str.indexOf('-') === -1 && str.indexOf('_') === -1) {\n        return str;\n    }\n    else {\n        let camelcase = '';\n        let nextChrUpper = false;\n        const leadingHyphens = str.match(/^-+/);\n        for (let i = leadingHyphens ? leadingHyphens[0].length : 0; i < str.length; i++) {\n            let chr = str.charAt(i);\n            if (nextChrUpper) {\n                nextChrUpper = false;\n                chr = chr.toUpperCase();\n            }\n            if (i !== 0 && (chr === '-' || chr === '_')) {\n                nextChrUpper = true;\n            }\n            else if (chr !== '-' && chr !== '_') {\n                camelcase += chr;\n            }\n        }\n        return camelcase;\n    }\n}\nexport function decamelize(str, joinString) {\n    const lowercase = str.toLowerCase();\n    joinString = joinString || '-';\n    let notCamelcase = '';\n    for (let i = 0; i < str.length; i++) {\n        const chrLower = lowercase.charAt(i);\n        const chrString = str.charAt(i);\n        if (chrLower !== chrString && i > 0) {\n            notCamelcase += `${joinString}${lowercase.charAt(i)}`;\n        }\n        else {\n            notCamelcase += chrString;\n        }\n    }\n    return notCamelcase;\n}\nexport function looksLikeNumber(x) {\n    if (x === null || x === undefined)\n        return false;\n    // if loaded from config, may already be a number.\n    if (typeof x === 'number')\n        return true;\n    // hexadecimal.\n    if (/^0x[0-9a-f]+$/i.test(x))\n        return true;\n    // don't treat 0123 as a number; as it drops the leading '0'.\n    if (/^0[^.]/.test(x))\n        return false;\n    return /^[-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(e[-+]?\\d+)?$/.test(x);\n}\n"]},"metadata":{},"sourceType":"module"}