{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n  if (Array.isArray(argString)) {\n    return argString.map(e => typeof e !== 'string' ? e + '' : e);\n  }\n\n  argString = argString.trim();\n  let i = 0;\n  let prevC = null;\n  let c = null;\n  let opening = null;\n  const args = [];\n\n  for (let ii = 0; ii < argString.length; ii++) {\n    prevC = c;\n    c = argString.charAt(ii); // split on spaces unless we're in quotes.\n\n    if (c === ' ' && !opening) {\n      if (!(prevC === ' ')) {\n        i++;\n      }\n\n      continue;\n    } // don't split the string if we're in matching\n    // opening or closing single and double quotes.\n\n\n    if (c === opening) {\n      opening = null;\n    } else if ((c === \"'\" || c === '\"') && !opening) {\n      opening = c;\n    }\n\n    if (!args[i]) args[i] = '';\n    args[i] += c;\n  }\n\n  return args;\n}","map":{"version":3,"sources":["C:/Users/YC/Desktop/brief6-frontend/node_modules/yargs-parser/build/lib/tokenize-arg-string.js"],"names":["tokenizeArgString","argString","Array","isArray","map","e","trim","i","prevC","c","opening","args","ii","length","charAt"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAT,CAA2BC,SAA3B,EAAsC;AACzC,MAAIC,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC1B,WAAOA,SAAS,CAACG,GAAV,CAAcC,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAb,GAAwBA,CAAC,GAAG,EAA5B,GAAiCA,CAApD,CAAP;AACH;;AACDJ,EAAAA,SAAS,GAAGA,SAAS,CAACK,IAAV,EAAZ;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,CAAC,GAAG,IAAR;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGX,SAAS,CAACY,MAAhC,EAAwCD,EAAE,EAA1C,EAA8C;AAC1CJ,IAAAA,KAAK,GAAGC,CAAR;AACAA,IAAAA,CAAC,GAAGR,SAAS,CAACa,MAAV,CAAiBF,EAAjB,CAAJ,CAF0C,CAG1C;;AACA,QAAIH,CAAC,KAAK,GAAN,IAAa,CAACC,OAAlB,EAA2B;AACvB,UAAI,EAAEF,KAAK,KAAK,GAAZ,CAAJ,EAAsB;AAClBD,QAAAA,CAAC;AACJ;;AACD;AACH,KATyC,CAU1C;AACA;;;AACA,QAAIE,CAAC,KAAKC,OAAV,EAAmB;AACfA,MAAAA,OAAO,GAAG,IAAV;AACH,KAFD,MAGK,IAAI,CAACD,CAAC,KAAK,GAAN,IAAaA,CAAC,KAAK,GAApB,KAA4B,CAACC,OAAjC,EAA0C;AAC3CA,MAAAA,OAAO,GAAGD,CAAV;AACH;;AACD,QAAI,CAACE,IAAI,CAACJ,CAAD,CAAT,EACII,IAAI,CAACJ,CAAD,CAAJ,GAAU,EAAV;AACJI,IAAAA,IAAI,CAACJ,CAAD,CAAJ,IAAWE,CAAX;AACH;;AACD,SAAOE,IAAP;AACH","sourcesContent":["/**\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\n// take an un-split argv string and tokenize it.\nexport function tokenizeArgString(argString) {\n    if (Array.isArray(argString)) {\n        return argString.map(e => typeof e !== 'string' ? e + '' : e);\n    }\n    argString = argString.trim();\n    let i = 0;\n    let prevC = null;\n    let c = null;\n    let opening = null;\n    const args = [];\n    for (let ii = 0; ii < argString.length; ii++) {\n        prevC = c;\n        c = argString.charAt(ii);\n        // split on spaces unless we're in quotes.\n        if (c === ' ' && !opening) {\n            if (!(prevC === ' ')) {\n                i++;\n            }\n            continue;\n        }\n        // don't split the string if we're in matching\n        // opening or closing single and double quotes.\n        if (c === opening) {\n            opening = null;\n        }\n        else if ((c === \"'\" || c === '\"') && !opening) {\n            opening = c;\n        }\n        if (!args[i])\n            args[i] = '';\n        args[i] += c;\n    }\n    return args;\n}\n"]},"metadata":{},"sourceType":"module"}