{"ast":null,"code":"import { isCommandBuilderCallback } from './command.js';\nimport { assertNotStrictEqual } from './typings/common-types.js';\nimport * as templates from './completion-templates.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { parseCommand } from './parse-command.js';\nexport function completion(yargs, usage, command, shim) {\n  const self = {\n    completionKey: 'get-yargs-completions'\n  };\n  let aliases;\n\n  self.setParsed = function setParsed(parsed) {\n    aliases = parsed.aliases;\n  };\n\n  const zshShell = shim.getEnv('SHELL') && shim.getEnv('SHELL').indexOf('zsh') !== -1 || shim.getEnv('ZSH_NAME') && shim.getEnv('ZSH_NAME').indexOf('zsh') !== -1;\n\n  self.getCompletion = function getCompletion(args, done) {\n    const completions = [];\n    const current = args.length ? args[args.length - 1] : '';\n    const argv = yargs.parse(args, true);\n    const parentCommands = yargs.getContext().commands;\n\n    function runCompletionFunction(argv) {\n      assertNotStrictEqual(completionFunction, null, shim);\n\n      if (isSyncCompletionFunction(completionFunction)) {\n        const result = completionFunction(current, argv);\n\n        if (isPromise(result)) {\n          return result.then(list => {\n            shim.process.nextTick(() => {\n              done(list);\n            });\n          }).catch(err => {\n            shim.process.nextTick(() => {\n              throw err;\n            });\n          });\n        }\n\n        return done(result);\n      } else {\n        return completionFunction(current, argv, completions => {\n          done(completions);\n        });\n      }\n    }\n\n    if (completionFunction) {\n      return isPromise(argv) ? argv.then(runCompletionFunction) : runCompletionFunction(argv);\n    }\n\n    const handlers = command.getCommandHandlers();\n\n    for (let i = 0, ii = args.length; i < ii; ++i) {\n      if (handlers[args[i]] && handlers[args[i]].builder) {\n        const builder = handlers[args[i]].builder;\n\n        if (isCommandBuilderCallback(builder)) {\n          const y = yargs.reset();\n          builder(y);\n          return y.argv;\n        }\n      }\n    }\n\n    if (!current.match(/^-/) && parentCommands[parentCommands.length - 1] !== current) {\n      usage.getCommands().forEach(usageCommand => {\n        const commandName = parseCommand(usageCommand[0]).cmd;\n\n        if (args.indexOf(commandName) === -1) {\n          if (!zshShell) {\n            completions.push(commandName);\n          } else {\n            const desc = usageCommand[1] || '';\n            completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n          }\n        }\n      });\n    }\n\n    if (current.match(/^-/) || current === '' && completions.length === 0) {\n      const descs = usage.getDescriptions();\n      const options = yargs.getOptions();\n      Object.keys(options.key).forEach(key => {\n        const negable = !!options.configuration['boolean-negation'] && options.boolean.includes(key);\n        let keyAndAliases = [key].concat(aliases[key] || []);\n        if (negable) keyAndAliases = keyAndAliases.concat(keyAndAliases.map(key => `no-${key}`));\n\n        function completeOptionKey(key) {\n          const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1);\n\n          if (notInArgs) {\n            const startsByTwoDashes = s => /^--/.test(s);\n\n            const isShortOption = s => /^[^0-9]$/.test(s);\n\n            const dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';\n\n            if (!zshShell) {\n              completions.push(dashes + key);\n            } else {\n              const desc = descs[key] || '';\n              completions.push(dashes + `${key.replace(/:/g, '\\\\:')}:${desc.replace('__yargsString__:', '')}`);\n            }\n          }\n        }\n\n        completeOptionKey(key);\n        if (negable && !!options.default[key]) completeOptionKey(`no-${key}`);\n      });\n    }\n\n    done(completions);\n  };\n\n  self.generateCompletionScript = function generateCompletionScript($0, cmd) {\n    let script = zshShell ? templates.completionZshTemplate : templates.completionShTemplate;\n    const name = shim.path.basename($0);\n    if ($0.match(/\\.js$/)) $0 = `./${$0}`;\n    script = script.replace(/{{app_name}}/g, name);\n    script = script.replace(/{{completion_command}}/g, cmd);\n    return script.replace(/{{app_path}}/g, $0);\n  };\n\n  let completionFunction = null;\n\n  self.registerFunction = fn => {\n    completionFunction = fn;\n  };\n\n  return self;\n}\n\nfunction isSyncCompletionFunction(completionFunction) {\n  return completionFunction.length < 3;\n}","map":{"version":3,"sources":["C:/Users/YC/Desktop/brief6-frontend/node_modules/yargs/build/lib/completion.js"],"names":["isCommandBuilderCallback","assertNotStrictEqual","templates","isPromise","parseCommand","completion","yargs","usage","command","shim","self","completionKey","aliases","setParsed","parsed","zshShell","getEnv","indexOf","getCompletion","args","done","completions","current","length","argv","parse","parentCommands","getContext","commands","runCompletionFunction","completionFunction","isSyncCompletionFunction","result","then","list","process","nextTick","catch","err","handlers","getCommandHandlers","i","ii","builder","y","reset","match","getCommands","forEach","usageCommand","commandName","cmd","push","desc","replace","descs","getDescriptions","options","getOptions","Object","keys","key","negable","configuration","boolean","includes","keyAndAliases","concat","map","completeOptionKey","notInArgs","every","val","startsByTwoDashes","s","test","isShortOption","dashes","default","generateCompletionScript","$0","script","completionZshTemplate","completionShTemplate","name","path","basename","registerFunction","fn"],"mappings":"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","sourcesContent":["import { isCommandBuilderCallback } from './command.js';\nimport { assertNotStrictEqual } from './typings/common-types.js';\nimport * as templates from './completion-templates.js';\nimport { isPromise } from './utils/is-promise.js';\nimport { parseCommand } from './parse-command.js';\nexport function completion(yargs, usage, command, shim) {\n    const self = {\n        completionKey: 'get-yargs-completions',\n    };\n    let aliases;\n    self.setParsed = function setParsed(parsed) {\n        aliases = parsed.aliases;\n    };\n    const zshShell = (shim.getEnv('SHELL') && shim.getEnv('SHELL').indexOf('zsh') !== -1) ||\n        (shim.getEnv('ZSH_NAME') && shim.getEnv('ZSH_NAME').indexOf('zsh') !== -1);\n    self.getCompletion = function getCompletion(args, done) {\n        const completions = [];\n        const current = args.length ? args[args.length - 1] : '';\n        const argv = yargs.parse(args, true);\n        const parentCommands = yargs.getContext().commands;\n        function runCompletionFunction(argv) {\n            assertNotStrictEqual(completionFunction, null, shim);\n            if (isSyncCompletionFunction(completionFunction)) {\n                const result = completionFunction(current, argv);\n                if (isPromise(result)) {\n                    return result\n                        .then(list => {\n                        shim.process.nextTick(() => {\n                            done(list);\n                        });\n                    })\n                        .catch(err => {\n                        shim.process.nextTick(() => {\n                            throw err;\n                        });\n                    });\n                }\n                return done(result);\n            }\n            else {\n                return completionFunction(current, argv, completions => {\n                    done(completions);\n                });\n            }\n        }\n        if (completionFunction) {\n            return isPromise(argv)\n                ? argv.then(runCompletionFunction)\n                : runCompletionFunction(argv);\n        }\n        const handlers = command.getCommandHandlers();\n        for (let i = 0, ii = args.length; i < ii; ++i) {\n            if (handlers[args[i]] && handlers[args[i]].builder) {\n                const builder = handlers[args[i]].builder;\n                if (isCommandBuilderCallback(builder)) {\n                    const y = yargs.reset();\n                    builder(y);\n                    return y.argv;\n                }\n            }\n        }\n        if (!current.match(/^-/) &&\n            parentCommands[parentCommands.length - 1] !== current) {\n            usage.getCommands().forEach(usageCommand => {\n                const commandName = parseCommand(usageCommand[0]).cmd;\n                if (args.indexOf(commandName) === -1) {\n                    if (!zshShell) {\n                        completions.push(commandName);\n                    }\n                    else {\n                        const desc = usageCommand[1] || '';\n                        completions.push(commandName.replace(/:/g, '\\\\:') + ':' + desc);\n                    }\n                }\n            });\n        }\n        if (current.match(/^-/) || (current === '' && completions.length === 0)) {\n            const descs = usage.getDescriptions();\n            const options = yargs.getOptions();\n            Object.keys(options.key).forEach(key => {\n                const negable = !!options.configuration['boolean-negation'] &&\n                    options.boolean.includes(key);\n                let keyAndAliases = [key].concat(aliases[key] || []);\n                if (negable)\n                    keyAndAliases = keyAndAliases.concat(keyAndAliases.map(key => `no-${key}`));\n                function completeOptionKey(key) {\n                    const notInArgs = keyAndAliases.every(val => args.indexOf(`--${val}`) === -1);\n                    if (notInArgs) {\n                        const startsByTwoDashes = (s) => /^--/.test(s);\n                        const isShortOption = (s) => /^[^0-9]$/.test(s);\n                        const dashes = !startsByTwoDashes(current) && isShortOption(key) ? '-' : '--';\n                        if (!zshShell) {\n                            completions.push(dashes + key);\n                        }\n                        else {\n                            const desc = descs[key] || '';\n                            completions.push(dashes +\n                                `${key.replace(/:/g, '\\\\:')}:${desc.replace('__yargsString__:', '')}`);\n                        }\n                    }\n                }\n                completeOptionKey(key);\n                if (negable && !!options.default[key])\n                    completeOptionKey(`no-${key}`);\n            });\n        }\n        done(completions);\n    };\n    self.generateCompletionScript = function generateCompletionScript($0, cmd) {\n        let script = zshShell\n            ? templates.completionZshTemplate\n            : templates.completionShTemplate;\n        const name = shim.path.basename($0);\n        if ($0.match(/\\.js$/))\n            $0 = `./${$0}`;\n        script = script.replace(/{{app_name}}/g, name);\n        script = script.replace(/{{completion_command}}/g, cmd);\n        return script.replace(/{{app_path}}/g, $0);\n    };\n    let completionFunction = null;\n    self.registerFunction = fn => {\n        completionFunction = fn;\n    };\n    return self;\n}\nfunction isSyncCompletionFunction(completionFunction) {\n    return completionFunction.length < 3;\n}\n"]},"metadata":{},"sourceType":"module"}