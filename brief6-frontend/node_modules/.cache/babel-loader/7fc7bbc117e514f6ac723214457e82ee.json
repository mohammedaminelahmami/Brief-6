{"ast":null,"code":"import { command as Command } from './command.js';\nimport { assertNotStrictEqual, assertSingleKey, objectKeys } from './typings/common-types.js';\nimport { YError } from './yerror.js';\nimport { usage as Usage } from './usage.js';\nimport { argsert } from './argsert.js';\nimport { completion as Completion } from './completion.js';\nimport { validation as Validation } from './validation.js';\nimport { objFilter } from './utils/obj-filter.js';\nimport { applyExtends } from './utils/apply-extends.js';\nimport { globalMiddlewareFactory } from './middleware.js';\nimport { isPromise } from './utils/is-promise.js';\nimport setBlocking from './utils/set-blocking.js';\nlet shim;\nexport function YargsWithShim(_shim) {\n  shim = _shim;\n  return Yargs;\n}\n\nfunction Yargs() {\n  let processArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let cwd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : shim.process.cwd();\n  let parentRequire = arguments.length > 2 ? arguments[2] : undefined;\n  const self = {};\n  let command;\n  let completion = null;\n  let groups = {};\n  const globalMiddleware = [];\n  let output = '';\n  const preservedGroups = {};\n  let usage;\n  let validation;\n  let handlerFinishCommand = null;\n  const y18n = shim.y18n;\n  self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n\n  self.scriptName = function (scriptName) {\n    self.customScriptName = true;\n    self.$0 = scriptName;\n    return self;\n  };\n\n  let default$0;\n\n  if (/\\b(node|iojs|electron)(\\.exe)?$/.test(shim.process.argv()[0])) {\n    default$0 = shim.process.argv().slice(1, 2);\n  } else {\n    default$0 = shim.process.argv().slice(0, 1);\n  }\n\n  self.$0 = default$0.map(x => {\n    const b = rebase(cwd, x);\n    return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n  }).join(' ').trim();\n\n  if (shim.getEnv('_') && shim.getProcessArgvBin() === shim.getEnv('_')) {\n    self.$0 = shim.getEnv('_').replace(`${shim.path.dirname(shim.process.execPath())}/`, '');\n  }\n\n  const context = {\n    resets: -1,\n    commands: [],\n    fullCommands: [],\n    files: []\n  };\n\n  self.getContext = () => context;\n\n  let hasOutput = false;\n  let exitError = null;\n\n  self.exit = (code, err) => {\n    hasOutput = true;\n    exitError = err;\n    if (exitProcess) shim.process.exit(code);\n  };\n\n  let completionCommand = null;\n\n  self.completion = function (cmd, desc, fn) {\n    argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length);\n\n    if (typeof desc === 'function') {\n      fn = desc;\n      desc = undefined;\n    }\n\n    completionCommand = cmd || completionCommand || 'completion';\n\n    if (!desc && desc !== false) {\n      desc = 'generate completion script';\n    }\n\n    self.command(completionCommand, desc);\n    if (fn) completion.registerFunction(fn);\n    return self;\n  };\n\n  let options;\n\n  self.resetOptions = self.reset = function resetOptions() {\n    let aliases = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    context.resets++;\n    options = options || {};\n    const tmpOptions = {};\n    tmpOptions.local = options.local ? options.local : [];\n    tmpOptions.configObjects = options.configObjects ? options.configObjects : [];\n    const localLookup = {};\n    tmpOptions.local.forEach(l => {\n      localLookup[l] = true;\n      (aliases[l] || []).forEach(a => {\n        localLookup[a] = true;\n      });\n    });\n    Object.assign(preservedGroups, Object.keys(groups).reduce((acc, groupName) => {\n      const keys = groups[groupName].filter(key => !(key in localLookup));\n\n      if (keys.length > 0) {\n        acc[groupName] = keys;\n      }\n\n      return acc;\n    }, {}));\n    groups = {};\n    const arrayOptions = ['array', 'boolean', 'string', 'skipValidation', 'count', 'normalize', 'number', 'hiddenOptions'];\n    const objectOptions = ['narg', 'key', 'alias', 'default', 'defaultDescription', 'config', 'choices', 'demandedOptions', 'demandedCommands', 'coerce', 'deprecatedOptions'];\n    arrayOptions.forEach(k => {\n      tmpOptions[k] = (options[k] || []).filter(k => !localLookup[k]);\n    });\n    objectOptions.forEach(k => {\n      tmpOptions[k] = objFilter(options[k], k => !localLookup[k]);\n    });\n    tmpOptions.envPrefix = options.envPrefix;\n    options = tmpOptions;\n    usage = usage ? usage.reset(localLookup) : Usage(self, y18n, shim);\n    validation = validation ? validation.reset(localLookup) : Validation(self, usage, y18n, shim);\n    command = command ? command.reset() : Command(self, usage, validation, globalMiddleware, shim);\n    if (!completion) completion = Completion(self, usage, command, shim);\n    completionCommand = null;\n    output = '';\n    exitError = null;\n    hasOutput = false;\n    self.parsed = false;\n    return self;\n  };\n\n  self.resetOptions();\n  const frozens = [];\n\n  function freeze() {\n    frozens.push({\n      options,\n      configObjects: options.configObjects.slice(0),\n      exitProcess,\n      groups,\n      strict,\n      strictCommands,\n      strictOptions,\n      completionCommand,\n      output,\n      exitError,\n      hasOutput,\n      parsed: self.parsed,\n      parseFn,\n      parseContext,\n      handlerFinishCommand\n    });\n    usage.freeze();\n    validation.freeze();\n    command.freeze();\n  }\n\n  function unfreeze() {\n    const frozen = frozens.pop();\n    assertNotStrictEqual(frozen, undefined, shim);\n    let configObjects;\n    ({\n      options,\n      configObjects,\n      exitProcess,\n      groups,\n      output,\n      exitError,\n      hasOutput,\n      parsed: self.parsed,\n      strict,\n      strictCommands,\n      strictOptions,\n      completionCommand,\n      parseFn,\n      parseContext,\n      handlerFinishCommand\n    } = frozen);\n    options.configObjects = configObjects;\n    usage.unfreeze();\n    validation.unfreeze();\n    command.unfreeze();\n  }\n\n  self.boolean = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('boolean', keys);\n    return self;\n  };\n\n  self.array = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('array', keys);\n    return self;\n  };\n\n  self.number = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('number', keys);\n    return self;\n  };\n\n  self.normalize = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('normalize', keys);\n    return self;\n  };\n\n  self.count = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('count', keys);\n    return self;\n  };\n\n  self.string = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('string', keys);\n    return self;\n  };\n\n  self.requiresArg = function (keys) {\n    argsert('<array|string|object> [number]', [keys], arguments.length);\n\n    if (typeof keys === 'string' && options.narg[keys]) {\n      return self;\n    } else {\n      populateParserHintSingleValueDictionary(self.requiresArg, 'narg', keys, NaN);\n    }\n\n    return self;\n  };\n\n  self.skipValidation = function (keys) {\n    argsert('<array|string>', [keys], arguments.length);\n    populateParserHintArray('skipValidation', keys);\n    return self;\n  };\n\n  function populateParserHintArray(type, keys) {\n    keys = [].concat(keys);\n    keys.forEach(key => {\n      key = sanitizeKey(key);\n      options[type].push(key);\n    });\n  }\n\n  self.nargs = function (key, value) {\n    argsert('<string|object|array> [number]', [key, value], arguments.length);\n    populateParserHintSingleValueDictionary(self.nargs, 'narg', key, value);\n    return self;\n  };\n\n  self.choices = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintArrayDictionary(self.choices, 'choices', key, value);\n    return self;\n  };\n\n  self.alias = function (key, value) {\n    argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n    populateParserHintArrayDictionary(self.alias, 'alias', key, value);\n    return self;\n  };\n\n  self.default = self.defaults = function (key, value, defaultDescription) {\n    argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n\n    if (defaultDescription) {\n      assertSingleKey(key, shim);\n      options.defaultDescription[key] = defaultDescription;\n    }\n\n    if (typeof value === 'function') {\n      assertSingleKey(key, shim);\n      if (!options.defaultDescription[key]) options.defaultDescription[key] = usage.functionDescription(value);\n      value = value.call();\n    }\n\n    populateParserHintSingleValueDictionary(self.default, 'default', key, value);\n    return self;\n  };\n\n  self.describe = function (key, desc) {\n    argsert('<object|string|array> [string]', [key, desc], arguments.length);\n    setKey(key, true);\n    usage.describe(key, desc);\n    return self;\n  };\n\n  function setKey(key, set) {\n    populateParserHintSingleValueDictionary(setKey, 'key', key, set);\n    return self;\n  }\n\n  function demandOption(keys, msg) {\n    argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n    populateParserHintSingleValueDictionary(self.demandOption, 'demandedOptions', keys, msg);\n    return self;\n  }\n\n  self.demandOption = demandOption;\n\n  self.coerce = function (keys, value) {\n    argsert('<object|string|array> [function]', [keys, value], arguments.length);\n    populateParserHintSingleValueDictionary(self.coerce, 'coerce', keys, value);\n    return self;\n  };\n\n  function populateParserHintSingleValueDictionary(builder, type, key, value) {\n    populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n      options[type][key] = value;\n    });\n  }\n\n  function populateParserHintArrayDictionary(builder, type, key, value) {\n    populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n      options[type][key] = (options[type][key] || []).concat(value);\n    });\n  }\n\n  function populateParserHintDictionary(builder, type, key, value, singleKeyHandler) {\n    if (Array.isArray(key)) {\n      key.forEach(k => {\n        builder(k, value);\n      });\n    } else if ((key => typeof key === 'object')(key)) {\n      for (const k of objectKeys(key)) {\n        builder(k, key[k]);\n      }\n    } else {\n      singleKeyHandler(type, sanitizeKey(key), value);\n    }\n  }\n\n  function sanitizeKey(key) {\n    if (key === '__proto__') return '___proto___';\n    return key;\n  }\n\n  function deleteFromParserHintObject(optionKey) {\n    objectKeys(options).forEach(hintKey => {\n      if ((key => key === 'configObjects')(hintKey)) return;\n      const hint = options[hintKey];\n\n      if (Array.isArray(hint)) {\n        if (~hint.indexOf(optionKey)) hint.splice(hint.indexOf(optionKey), 1);\n      } else if (typeof hint === 'object') {\n        delete hint[optionKey];\n      }\n    });\n    delete usage.getDescriptions()[optionKey];\n  }\n\n  self.config = function config() {\n    let key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'config';\n    let msg = arguments.length > 1 ? arguments[1] : undefined;\n    let parseFn = arguments.length > 2 ? arguments[2] : undefined;\n    argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length);\n\n    if (typeof key === 'object' && !Array.isArray(key)) {\n      key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim);\n      options.configObjects = (options.configObjects || []).concat(key);\n      return self;\n    }\n\n    if (typeof msg === 'function') {\n      parseFn = msg;\n      msg = undefined;\n    }\n\n    self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'));\n    (Array.isArray(key) ? key : [key]).forEach(k => {\n      options.config[k] = parseFn || true;\n    });\n    return self;\n  };\n\n  self.example = function (cmd, description) {\n    argsert('<string|array> [string]', [cmd, description], arguments.length);\n\n    if (Array.isArray(cmd)) {\n      cmd.forEach(exampleParams => self.example(...exampleParams));\n    } else {\n      usage.example(cmd, description);\n    }\n\n    return self;\n  };\n\n  self.command = function (cmd, description, builder, handler, middlewares, deprecated) {\n    argsert('<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]', [cmd, description, builder, handler, middlewares, deprecated], arguments.length);\n    command.addHandler(cmd, description, builder, handler, middlewares, deprecated);\n    return self;\n  };\n\n  self.commandDir = function (dir, opts) {\n    argsert('<string> [object]', [dir, opts], arguments.length);\n    const req = parentRequire || shim.require;\n    command.addDirectory(dir, self.getContext(), req, shim.getCallerFile(), opts);\n    return self;\n  };\n\n  self.demand = self.required = self.require = function demand(keys, max, msg) {\n    if (Array.isArray(max)) {\n      max.forEach(key => {\n        assertNotStrictEqual(msg, true, shim);\n        demandOption(key, msg);\n      });\n      max = Infinity;\n    } else if (typeof max !== 'number') {\n      msg = max;\n      max = Infinity;\n    }\n\n    if (typeof keys === 'number') {\n      assertNotStrictEqual(msg, true, shim);\n      self.demandCommand(keys, max, msg, msg);\n    } else if (Array.isArray(keys)) {\n      keys.forEach(key => {\n        assertNotStrictEqual(msg, true, shim);\n        demandOption(key, msg);\n      });\n    } else {\n      if (typeof msg === 'string') {\n        demandOption(keys, msg);\n      } else if (msg === true || typeof msg === 'undefined') {\n        demandOption(keys);\n      }\n    }\n\n    return self;\n  };\n\n  self.demandCommand = function demandCommand() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let max = arguments.length > 1 ? arguments[1] : undefined;\n    let minMsg = arguments.length > 2 ? arguments[2] : undefined;\n    let maxMsg = arguments.length > 3 ? arguments[3] : undefined;\n    argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n\n    if (typeof max !== 'number') {\n      minMsg = max;\n      max = Infinity;\n    }\n\n    self.global('_', false);\n    options.demandedCommands._ = {\n      min,\n      max,\n      minMsg,\n      maxMsg\n    };\n    return self;\n  };\n\n  self.getDemandedOptions = () => {\n    argsert([], 0);\n    return options.demandedOptions;\n  };\n\n  self.getDemandedCommands = () => {\n    argsert([], 0);\n    return options.demandedCommands;\n  };\n\n  self.deprecateOption = function deprecateOption(option, message) {\n    argsert('<string> [string|boolean]', [option, message], arguments.length);\n    options.deprecatedOptions[option] = message;\n    return self;\n  };\n\n  self.getDeprecatedOptions = () => {\n    argsert([], 0);\n    return options.deprecatedOptions;\n  };\n\n  self.implies = function (key, value) {\n    argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n    validation.implies(key, value);\n    return self;\n  };\n\n  self.conflicts = function (key1, key2) {\n    argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n    validation.conflicts(key1, key2);\n    return self;\n  };\n\n  self.usage = function (msg, description, builder, handler) {\n    argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n\n    if (description !== undefined) {\n      assertNotStrictEqual(msg, null, shim);\n\n      if ((msg || '').match(/^\\$0( |$)/)) {\n        return self.command(msg, description, builder, handler);\n      } else {\n        throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n      }\n    } else {\n      usage.usage(msg);\n      return self;\n    }\n  };\n\n  self.epilogue = self.epilog = function (msg) {\n    argsert('<string>', [msg], arguments.length);\n    usage.epilog(msg);\n    return self;\n  };\n\n  self.fail = function (f) {\n    argsert('<function>', [f], arguments.length);\n    usage.failFn(f);\n    return self;\n  };\n\n  self.onFinishCommand = function (f) {\n    argsert('<function>', [f], arguments.length);\n    handlerFinishCommand = f;\n    return self;\n  };\n\n  self.getHandlerFinishCommand = () => handlerFinishCommand;\n\n  self.check = function (f, _global) {\n    argsert('<function> [boolean]', [f, _global], arguments.length);\n    validation.check(f, _global !== false);\n    return self;\n  };\n\n  self.global = function global(globals, global) {\n    argsert('<string|array> [boolean]', [globals, global], arguments.length);\n    globals = [].concat(globals);\n\n    if (global !== false) {\n      options.local = options.local.filter(l => globals.indexOf(l) === -1);\n    } else {\n      globals.forEach(g => {\n        if (options.local.indexOf(g) === -1) options.local.push(g);\n      });\n    }\n\n    return self;\n  };\n\n  self.pkgConf = function pkgConf(key, rootPath) {\n    argsert('<string> [string]', [key, rootPath], arguments.length);\n    let conf = null;\n    const obj = pkgUp(rootPath || cwd);\n\n    if (obj[key] && typeof obj[key] === 'object') {\n      conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim);\n      options.configObjects = (options.configObjects || []).concat(conf);\n    }\n\n    return self;\n  };\n\n  const pkgs = {};\n\n  function pkgUp(rootPath) {\n    const npath = rootPath || '*';\n    if (pkgs[npath]) return pkgs[npath];\n    let obj = {};\n\n    try {\n      let startDir = rootPath || shim.mainFilename;\n\n      if (!rootPath && shim.path.extname(startDir)) {\n        startDir = shim.path.dirname(startDir);\n      }\n\n      const pkgJsonPath = shim.findUp(startDir, (dir, names) => {\n        if (names.includes('package.json')) {\n          return 'package.json';\n        } else {\n          return undefined;\n        }\n      });\n      assertNotStrictEqual(pkgJsonPath, undefined, shim);\n      obj = JSON.parse(shim.readFileSync(pkgJsonPath, 'utf8'));\n    } catch (_noop) {}\n\n    pkgs[npath] = obj || {};\n    return pkgs[npath];\n  }\n\n  let parseFn = null;\n  let parseContext = null;\n\n  self.parse = function parse(args, shortCircuit, _parseFn) {\n    argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n    freeze();\n\n    if (typeof args === 'undefined') {\n      const argv = self._parseArgs(processArgs);\n\n      const tmpParsed = self.parsed;\n      unfreeze();\n      self.parsed = tmpParsed;\n      return argv;\n    }\n\n    if (typeof shortCircuit === 'object') {\n      parseContext = shortCircuit;\n      shortCircuit = _parseFn;\n    }\n\n    if (typeof shortCircuit === 'function') {\n      parseFn = shortCircuit;\n      shortCircuit = false;\n    }\n\n    if (!shortCircuit) processArgs = args;\n    if (parseFn) exitProcess = false;\n\n    const parsed = self._parseArgs(args, !!shortCircuit);\n\n    completion.setParsed(self.parsed);\n    if (parseFn) parseFn(exitError, parsed, output);\n    unfreeze();\n    return parsed;\n  };\n\n  self._getParseContext = () => parseContext || {};\n\n  self._hasParseCallback = () => !!parseFn;\n\n  self.option = self.options = function option(key, opt) {\n    argsert('<string|object> [object]', [key, opt], arguments.length);\n\n    if (typeof key === 'object') {\n      Object.keys(key).forEach(k => {\n        self.options(k, key[k]);\n      });\n    } else {\n      if (typeof opt !== 'object') {\n        opt = {};\n      }\n\n      options.key[key] = true;\n      if (opt.alias) self.alias(key, opt.alias);\n      const deprecate = opt.deprecate || opt.deprecated;\n\n      if (deprecate) {\n        self.deprecateOption(key, deprecate);\n      }\n\n      const demand = opt.demand || opt.required || opt.require;\n\n      if (demand) {\n        self.demand(key, demand);\n      }\n\n      if (opt.demandOption) {\n        self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n      }\n\n      if (opt.conflicts) {\n        self.conflicts(key, opt.conflicts);\n      }\n\n      if ('default' in opt) {\n        self.default(key, opt.default);\n      }\n\n      if (opt.implies !== undefined) {\n        self.implies(key, opt.implies);\n      }\n\n      if (opt.nargs !== undefined) {\n        self.nargs(key, opt.nargs);\n      }\n\n      if (opt.config) {\n        self.config(key, opt.configParser);\n      }\n\n      if (opt.normalize) {\n        self.normalize(key);\n      }\n\n      if (opt.choices) {\n        self.choices(key, opt.choices);\n      }\n\n      if (opt.coerce) {\n        self.coerce(key, opt.coerce);\n      }\n\n      if (opt.group) {\n        self.group(key, opt.group);\n      }\n\n      if (opt.boolean || opt.type === 'boolean') {\n        self.boolean(key);\n        if (opt.alias) self.boolean(opt.alias);\n      }\n\n      if (opt.array || opt.type === 'array') {\n        self.array(key);\n        if (opt.alias) self.array(opt.alias);\n      }\n\n      if (opt.number || opt.type === 'number') {\n        self.number(key);\n        if (opt.alias) self.number(opt.alias);\n      }\n\n      if (opt.string || opt.type === 'string') {\n        self.string(key);\n        if (opt.alias) self.string(opt.alias);\n      }\n\n      if (opt.count || opt.type === 'count') {\n        self.count(key);\n      }\n\n      if (typeof opt.global === 'boolean') {\n        self.global(key, opt.global);\n      }\n\n      if (opt.defaultDescription) {\n        options.defaultDescription[key] = opt.defaultDescription;\n      }\n\n      if (opt.skipValidation) {\n        self.skipValidation(key);\n      }\n\n      const desc = opt.describe || opt.description || opt.desc;\n      self.describe(key, desc);\n\n      if (opt.hidden) {\n        self.hide(key);\n      }\n\n      if (opt.requiresArg) {\n        self.requiresArg(key);\n      }\n    }\n\n    return self;\n  };\n\n  self.getOptions = () => options;\n\n  self.positional = function (key, opts) {\n    argsert('<string> <object>', [key, opts], arguments.length);\n\n    if (context.resets === 0) {\n      throw new YError(\".positional() can only be called in a command's builder function\");\n    }\n\n    const supportedOpts = ['default', 'defaultDescription', 'implies', 'normalize', 'choices', 'conflicts', 'coerce', 'type', 'describe', 'desc', 'description', 'alias'];\n    opts = objFilter(opts, (k, v) => {\n      let accept = supportedOpts.indexOf(k) !== -1;\n      if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1) accept = false;\n      return accept;\n    });\n    const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n    const parseOptions = fullCommand ? command.cmdToParseOptions(fullCommand) : {\n      array: [],\n      alias: {},\n      default: {},\n      demand: {}\n    };\n    objectKeys(parseOptions).forEach(pk => {\n      const parseOption = parseOptions[pk];\n\n      if (Array.isArray(parseOption)) {\n        if (parseOption.indexOf(key) !== -1) opts[pk] = true;\n      } else {\n        if (parseOption[key] && !(pk in opts)) opts[pk] = parseOption[key];\n      }\n    });\n    self.group(key, usage.getPositionalGroupName());\n    return self.option(key, opts);\n  };\n\n  self.group = function group(opts, groupName) {\n    argsert('<string|array> <string>', [opts, groupName], arguments.length);\n    const existing = preservedGroups[groupName] || groups[groupName];\n\n    if (preservedGroups[groupName]) {\n      delete preservedGroups[groupName];\n    }\n\n    const seen = {};\n    groups[groupName] = (existing || []).concat(opts).filter(key => {\n      if (seen[key]) return false;\n      return seen[key] = true;\n    });\n    return self;\n  };\n\n  self.getGroups = () => Object.assign({}, groups, preservedGroups);\n\n  self.env = function (prefix) {\n    argsert('[string|boolean]', [prefix], arguments.length);\n    if (prefix === false) delete options.envPrefix;else options.envPrefix = prefix || '';\n    return self;\n  };\n\n  self.wrap = function (cols) {\n    argsert('<number|null|undefined>', [cols], arguments.length);\n    usage.wrap(cols);\n    return self;\n  };\n\n  let strict = false;\n\n  self.strict = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strict = enabled !== false;\n    return self;\n  };\n\n  self.getStrict = () => strict;\n\n  let strictCommands = false;\n\n  self.strictCommands = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strictCommands = enabled !== false;\n    return self;\n  };\n\n  self.getStrictCommands = () => strictCommands;\n\n  let strictOptions = false;\n\n  self.strictOptions = function (enabled) {\n    argsert('[boolean]', [enabled], arguments.length);\n    strictOptions = enabled !== false;\n    return self;\n  };\n\n  self.getStrictOptions = () => strictOptions;\n\n  let parserConfig = {};\n\n  self.parserConfiguration = function parserConfiguration(config) {\n    argsert('<object>', [config], arguments.length);\n    parserConfig = config;\n    return self;\n  };\n\n  self.getParserConfiguration = () => parserConfig;\n\n  self.showHelp = function (level) {\n    argsert('[string|function]', [level], arguments.length);\n    if (!self.parsed) self._parseArgs(processArgs);\n\n    if (command.hasDefaultCommand()) {\n      context.resets++;\n      command.runDefaultBuilderOn(self);\n    }\n\n    usage.showHelp(level);\n    return self;\n  };\n\n  let versionOpt = null;\n\n  self.version = function version(opt, msg, ver) {\n    const defaultVersionOpt = 'version';\n    argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length);\n\n    if (versionOpt) {\n      deleteFromParserHintObject(versionOpt);\n      usage.version(undefined);\n      versionOpt = null;\n    }\n\n    if (arguments.length === 0) {\n      ver = guessVersion();\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 1) {\n      if (opt === false) {\n        return self;\n      }\n\n      ver = opt;\n      opt = defaultVersionOpt;\n    } else if (arguments.length === 2) {\n      ver = msg;\n      msg = undefined;\n    }\n\n    versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n    msg = msg || usage.deferY18nLookup('Show version number');\n    usage.version(ver || undefined);\n    self.boolean(versionOpt);\n    self.describe(versionOpt, msg);\n    return self;\n  };\n\n  function guessVersion() {\n    const obj = pkgUp();\n    return obj.version || 'unknown';\n  }\n\n  let helpOpt = null;\n\n  self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n    const defaultHelpOpt = 'help';\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n\n    if (helpOpt) {\n      deleteFromParserHintObject(helpOpt);\n      helpOpt = null;\n    }\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n\n    helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n    self.boolean(helpOpt);\n    self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'));\n    return self;\n  };\n\n  const defaultShowHiddenOpt = 'show-hidden';\n  options.showHiddenOpt = defaultShowHiddenOpt;\n\n  self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n    argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n\n    if (arguments.length === 1) {\n      if (opt === false) return self;\n    }\n\n    const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n    self.boolean(showHiddenOpt);\n    self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'));\n    options.showHiddenOpt = showHiddenOpt;\n    return self;\n  };\n\n  self.hide = function hide(key) {\n    argsert('<string>', [key], arguments.length);\n    options.hiddenOptions.push(key);\n    return self;\n  };\n\n  self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n    argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n    usage.showHelpOnFail(enabled, message);\n    return self;\n  };\n\n  let exitProcess = true;\n\n  self.exitProcess = function () {\n    let enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    argsert('[boolean]', [enabled], arguments.length);\n    exitProcess = enabled;\n    return self;\n  };\n\n  self.getExitProcess = () => exitProcess;\n\n  self.showCompletionScript = function ($0, cmd) {\n    argsert('[string] [string]', [$0, cmd], arguments.length);\n    $0 = $0 || self.$0;\n\n    _logger.log(completion.generateCompletionScript($0, cmd || completionCommand || 'completion'));\n\n    return self;\n  };\n\n  self.getCompletion = function (args, done) {\n    argsert('<array> <function>', [args, done], arguments.length);\n    completion.getCompletion(args, done);\n  };\n\n  self.locale = function (locale) {\n    argsert('[string]', [locale], arguments.length);\n\n    if (!locale) {\n      guessLocale();\n      return y18n.getLocale();\n    }\n\n    detectLocale = false;\n    y18n.setLocale(locale);\n    return self;\n  };\n\n  self.updateStrings = self.updateLocale = function (obj) {\n    argsert('<object>', [obj], arguments.length);\n    detectLocale = false;\n    y18n.updateLocale(obj);\n    return self;\n  };\n\n  let detectLocale = true;\n\n  self.detectLocale = function (detect) {\n    argsert('<boolean>', [detect], arguments.length);\n    detectLocale = detect;\n    return self;\n  };\n\n  self.getDetectLocale = () => detectLocale;\n\n  const _logger = {\n    log() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (!self._hasParseCallback()) console.log(...args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    },\n\n    error() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (!self._hasParseCallback()) console.error(...args);\n      hasOutput = true;\n      if (output.length) output += '\\n';\n      output += args.join(' ');\n    }\n\n  };\n\n  self._getLoggerInstance = () => _logger;\n\n  self._hasOutput = () => hasOutput;\n\n  self._setHasOutput = () => {\n    hasOutput = true;\n  };\n\n  let recommendCommands;\n\n  self.recommendCommands = function () {\n    let recommend = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    argsert('[boolean]', [recommend], arguments.length);\n    recommendCommands = recommend;\n    return self;\n  };\n\n  self.getUsageInstance = () => usage;\n\n  self.getValidationInstance = () => validation;\n\n  self.getCommandInstance = () => command;\n\n  self.terminalWidth = () => {\n    argsert([], 0);\n    return shim.process.stdColumns;\n  };\n\n  Object.defineProperty(self, 'argv', {\n    get: () => self._parseArgs(processArgs),\n    enumerable: true\n  });\n\n  self._parseArgs = function parseArgs(args, shortCircuit, _calledFromCommand, commandIndex) {\n    let skipValidation = !!_calledFromCommand;\n    args = args || processArgs;\n    options.__ = y18n.__;\n    options.configuration = self.getParserConfiguration();\n    const populateDoubleDash = !!options.configuration['populate--'];\n    const config = Object.assign({}, options.configuration, {\n      'populate--': true\n    });\n    const parsed = shim.Parser.detailed(args, Object.assign({}, options, {\n      configuration: Object.assign({\n        'parse-positional-numbers': false\n      }, config)\n    }));\n    let argv = parsed.argv;\n    if (parseContext) argv = Object.assign({}, argv, parseContext);\n    const aliases = parsed.aliases;\n    argv.$0 = self.$0;\n    self.parsed = parsed;\n\n    try {\n      guessLocale();\n\n      if (shortCircuit) {\n        return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n      }\n\n      if (helpOpt) {\n        const helpCmds = [helpOpt].concat(aliases[helpOpt] || []).filter(k => k.length > 1);\n\n        if (~helpCmds.indexOf('' + argv._[argv._.length - 1])) {\n          argv._.pop();\n\n          argv[helpOpt] = true;\n        }\n      }\n\n      const handlerKeys = command.getCommands();\n      const requestCompletions = (completion.completionKey in argv);\n      const skipRecommendation = argv[helpOpt] || requestCompletions;\n      const skipDefaultCommand = skipRecommendation && (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n\n      if (argv._.length) {\n        if (handlerKeys.length) {\n          let firstUnknownCommand;\n\n          for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n            cmd = String(argv._[i]);\n\n            if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n              const innerArgv = command.runCommand(cmd, self, parsed, i + 1);\n              return self._postProcess(innerArgv, populateDoubleDash);\n            } else if (!firstUnknownCommand && cmd !== completionCommand) {\n              firstUnknownCommand = cmd;\n              break;\n            }\n          }\n\n          if (command.hasDefaultCommand() && !skipDefaultCommand) {\n            const innerArgv = command.runCommand(null, self, parsed);\n            return self._postProcess(innerArgv, populateDoubleDash);\n          }\n\n          if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n            validation.recommendCommands(firstUnknownCommand, handlerKeys);\n          }\n        }\n\n        if (completionCommand && ~argv._.indexOf(completionCommand) && !requestCompletions) {\n          if (exitProcess) setBlocking(true);\n          self.showCompletionScript();\n          self.exit(0);\n        }\n      } else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n        const innerArgv = command.runCommand(null, self, parsed);\n        return self._postProcess(innerArgv, populateDoubleDash);\n      }\n\n      if (requestCompletions) {\n        if (exitProcess) setBlocking(true);\n        args = [].concat(args);\n        const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);\n        completion.getCompletion(completionArgs, completions => {\n          (completions || []).forEach(completion => {\n            _logger.log(completion);\n          });\n          self.exit(0);\n        });\n        return self._postProcess(argv, !populateDoubleDash, _calledFromCommand);\n      }\n\n      if (!hasOutput) {\n        Object.keys(argv).forEach(key => {\n          if (key === helpOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            self.showHelp('log');\n            self.exit(0);\n          } else if (key === versionOpt && argv[key]) {\n            if (exitProcess) setBlocking(true);\n            skipValidation = true;\n            usage.showVersion();\n            self.exit(0);\n          }\n        });\n      }\n\n      if (!skipValidation && options.skipValidation.length > 0) {\n        skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n      }\n\n      if (!skipValidation) {\n        if (parsed.error) throw new YError(parsed.error.message);\n\n        if (!requestCompletions) {\n          self._runValidation(argv, aliases, {}, parsed.error);\n        }\n      }\n    } catch (err) {\n      if (err instanceof YError) usage.fail(err.message, err);else throw err;\n    }\n\n    return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n  };\n\n  self._postProcess = function (argv, populateDoubleDash) {\n    let calledFromCommand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (isPromise(argv)) return argv;\n    if (calledFromCommand) return argv;\n\n    if (!populateDoubleDash) {\n      argv = self._copyDoubleDash(argv);\n    }\n\n    const parsePositionalNumbers = self.getParserConfiguration()['parse-positional-numbers'] || self.getParserConfiguration()['parse-positional-numbers'] === undefined;\n\n    if (parsePositionalNumbers) {\n      argv = self._parsePositionalNumbers(argv);\n    }\n\n    return argv;\n  };\n\n  self._copyDoubleDash = function (argv) {\n    if (!argv._ || !argv['--']) return argv;\n\n    argv._.push.apply(argv._, argv['--']);\n\n    try {\n      delete argv['--'];\n    } catch (_err) {}\n\n    return argv;\n  };\n\n  self._parsePositionalNumbers = function (argv) {\n    const args = argv['--'] ? argv['--'] : argv._;\n\n    for (let i = 0, arg; (arg = args[i]) !== undefined; i++) {\n      if (shim.Parser.looksLikeNumber(arg) && Number.isSafeInteger(Math.floor(parseFloat(`${arg}`)))) {\n        args[i] = Number(arg);\n      }\n    }\n\n    return argv;\n  };\n\n  self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors) {\n    let isDefaultCommand = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (parseErrors) throw new YError(parseErrors.message);\n    validation.nonOptionCount(argv);\n    validation.requiredArguments(argv);\n    let failedStrictCommands = false;\n\n    if (strictCommands) {\n      failedStrictCommands = validation.unknownCommands(argv);\n    }\n\n    if (strict && !failedStrictCommands) {\n      validation.unknownArguments(argv, aliases, positionalMap, isDefaultCommand);\n    } else if (strictOptions) {\n      validation.unknownArguments(argv, aliases, {}, false, false);\n    }\n\n    validation.customChecks(argv, aliases);\n    validation.limitedChoices(argv);\n    validation.implications(argv);\n    validation.conflicting(argv);\n  };\n\n  function guessLocale() {\n    if (!detectLocale) return;\n    const locale = shim.getEnv('LC_ALL') || shim.getEnv('LC_MESSAGES') || shim.getEnv('LANG') || shim.getEnv('LANGUAGE') || 'en_US';\n    self.locale(locale.replace(/[.:].*/, ''));\n  }\n\n  self.help();\n  self.version();\n  return self;\n}\n\nexport const rebase = (base, dir) => shim.path.relative(base, dir);\nexport function isYargsInstance(y) {\n  return !!y && typeof y._parseArgs === 'function';\n}","map":{"version":3,"sources":["C:/Users/YC/Desktop/brief6-frontend/node_modules/yargs/build/lib/yargs-factory.js"],"names":["command","Command","assertNotStrictEqual","assertSingleKey","objectKeys","YError","usage","Usage","argsert","completion","Completion","validation","Validation","objFilter","applyExtends","globalMiddlewareFactory","isPromise","setBlocking","shim","YargsWithShim","_shim","Yargs","processArgs","cwd","process","parentRequire","self","groups","globalMiddleware","output","preservedGroups","handlerFinishCommand","y18n","middleware","scriptName","customScriptName","$0","default$0","test","argv","slice","map","x","b","rebase","match","length","join","trim","getEnv","getProcessArgvBin","replace","path","dirname","execPath","context","resets","commands","fullCommands","files","getContext","hasOutput","exitError","exit","code","err","exitProcess","completionCommand","cmd","desc","fn","arguments","undefined","registerFunction","options","resetOptions","reset","aliases","tmpOptions","local","configObjects","localLookup","forEach","l","a","Object","assign","keys","reduce","acc","groupName","filter","key","arrayOptions","objectOptions","k","envPrefix","parsed","frozens","freeze","push","strict","strictCommands","strictOptions","parseFn","parseContext","unfreeze","frozen","pop","boolean","populateParserHintArray","array","number","normalize","count","string","requiresArg","narg","populateParserHintSingleValueDictionary","NaN","skipValidation","type","concat","sanitizeKey","nargs","value","choices","populateParserHintArrayDictionary","alias","default","defaults","defaultDescription","functionDescription","call","describe","setKey","set","demandOption","msg","coerce","builder","populateParserHintDictionary","singleKeyHandler","Array","isArray","deleteFromParserHintObject","optionKey","hintKey","hint","indexOf","splice","getDescriptions","config","getParserConfiguration","deferY18nLookup","example","description","exampleParams","handler","middlewares","deprecated","addHandler","commandDir","dir","opts","req","require","addDirectory","getCallerFile","demand","required","max","Infinity","demandCommand","min","minMsg","maxMsg","global","demandedCommands","_","getDemandedOptions","demandedOptions","getDemandedCommands","deprecateOption","option","message","deprecatedOptions","getDeprecatedOptions","implies","conflicts","key1","key2","epilogue","epilog","fail","f","failFn","onFinishCommand","getHandlerFinishCommand","check","_global","globals","g","pkgConf","rootPath","conf","obj","pkgUp","pkgs","npath","startDir","mainFilename","extname","pkgJsonPath","findUp","names","includes","JSON","parse","readFileSync","_noop","args","shortCircuit","_parseFn","_parseArgs","tmpParsed","setParsed","_getParseContext","_hasParseCallback","opt","deprecate","configParser","group","hidden","hide","getOptions","positional","supportedOpts","v","accept","fullCommand","parseOptions","cmdToParseOptions","pk","parseOption","getPositionalGroupName","existing","seen","getGroups","env","prefix","wrap","cols","enabled","getStrict","getStrictCommands","getStrictOptions","parserConfig","parserConfiguration","showHelp","level","hasDefaultCommand","runDefaultBuilderOn","versionOpt","version","ver","defaultVersionOpt","guessVersion","helpOpt","addHelpOpt","help","defaultHelpOpt","defaultShowHiddenOpt","showHiddenOpt","addShowHiddenOpt","showHidden","hiddenOptions","showHelpOnFail","getExitProcess","showCompletionScript","_logger","log","generateCompletionScript","getCompletion","done","locale","guessLocale","getLocale","detectLocale","setLocale","updateStrings","updateLocale","detect","getDetectLocale","console","error","_getLoggerInstance","_hasOutput","_setHasOutput","recommendCommands","recommend","getUsageInstance","getValidationInstance","getCommandInstance","terminalWidth","stdColumns","defineProperty","get","enumerable","parseArgs","_calledFromCommand","commandIndex","__","configuration","populateDoubleDash","Parser","detailed","_postProcess","helpCmds","handlerKeys","getCommands","requestCompletions","completionKey","skipRecommendation","skipDefaultCommand","firstUnknownCommand","i","String","innerArgv","runCommand","completionArgs","completions","showVersion","some","_runValidation","calledFromCommand","_copyDoubleDash","parsePositionalNumbers","_parsePositionalNumbers","apply","_err","arg","looksLikeNumber","Number","isSafeInteger","Math","floor","parseFloat","runValidation","positionalMap","parseErrors","isDefaultCommand","nonOptionCount","requiredArguments","failedStrictCommands","unknownCommands","unknownArguments","customChecks","limitedChoices","implications","conflicting","base","relative","isYargsInstance","y"],"mappings":"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","sourcesContent":["import { command as Command, } from './command.js';\nimport { assertNotStrictEqual, assertSingleKey, objectKeys, } from './typings/common-types.js';\nimport { YError } from './yerror.js';\nimport { usage as Usage } from './usage.js';\nimport { argsert } from './argsert.js';\nimport { completion as Completion, } from './completion.js';\nimport { validation as Validation, } from './validation.js';\nimport { objFilter } from './utils/obj-filter.js';\nimport { applyExtends } from './utils/apply-extends.js';\nimport { globalMiddlewareFactory, } from './middleware.js';\nimport { isPromise } from './utils/is-promise.js';\nimport setBlocking from './utils/set-blocking.js';\nlet shim;\nexport function YargsWithShim(_shim) {\n    shim = _shim;\n    return Yargs;\n}\nfunction Yargs(processArgs = [], cwd = shim.process.cwd(), parentRequire) {\n    const self = {};\n    let command;\n    let completion = null;\n    let groups = {};\n    const globalMiddleware = [];\n    let output = '';\n    const preservedGroups = {};\n    let usage;\n    let validation;\n    let handlerFinishCommand = null;\n    const y18n = shim.y18n;\n    self.middleware = globalMiddlewareFactory(globalMiddleware, self);\n    self.scriptName = function (scriptName) {\n        self.customScriptName = true;\n        self.$0 = scriptName;\n        return self;\n    };\n    let default$0;\n    if (/\\b(node|iojs|electron)(\\.exe)?$/.test(shim.process.argv()[0])) {\n        default$0 = shim.process.argv().slice(1, 2);\n    }\n    else {\n        default$0 = shim.process.argv().slice(0, 1);\n    }\n    self.$0 = default$0\n        .map(x => {\n        const b = rebase(cwd, x);\n        return x.match(/^(\\/|([a-zA-Z]:)?\\\\)/) && b.length < x.length ? b : x;\n    })\n        .join(' ')\n        .trim();\n    if (shim.getEnv('_') && shim.getProcessArgvBin() === shim.getEnv('_')) {\n        self.$0 = shim\n            .getEnv('_')\n            .replace(`${shim.path.dirname(shim.process.execPath())}/`, '');\n    }\n    const context = { resets: -1, commands: [], fullCommands: [], files: [] };\n    self.getContext = () => context;\n    let hasOutput = false;\n    let exitError = null;\n    self.exit = (code, err) => {\n        hasOutput = true;\n        exitError = err;\n        if (exitProcess)\n            shim.process.exit(code);\n    };\n    let completionCommand = null;\n    self.completion = function (cmd, desc, fn) {\n        argsert('[string] [string|boolean|function] [function]', [cmd, desc, fn], arguments.length);\n        if (typeof desc === 'function') {\n            fn = desc;\n            desc = undefined;\n        }\n        completionCommand = cmd || completionCommand || 'completion';\n        if (!desc && desc !== false) {\n            desc = 'generate completion script';\n        }\n        self.command(completionCommand, desc);\n        if (fn)\n            completion.registerFunction(fn);\n        return self;\n    };\n    let options;\n    self.resetOptions = self.reset = function resetOptions(aliases = {}) {\n        context.resets++;\n        options = options || {};\n        const tmpOptions = {};\n        tmpOptions.local = options.local ? options.local : [];\n        tmpOptions.configObjects = options.configObjects\n            ? options.configObjects\n            : [];\n        const localLookup = {};\n        tmpOptions.local.forEach(l => {\n            localLookup[l] = true;\n            (aliases[l] || []).forEach(a => {\n                localLookup[a] = true;\n            });\n        });\n        Object.assign(preservedGroups, Object.keys(groups).reduce((acc, groupName) => {\n            const keys = groups[groupName].filter(key => !(key in localLookup));\n            if (keys.length > 0) {\n                acc[groupName] = keys;\n            }\n            return acc;\n        }, {}));\n        groups = {};\n        const arrayOptions = [\n            'array',\n            'boolean',\n            'string',\n            'skipValidation',\n            'count',\n            'normalize',\n            'number',\n            'hiddenOptions',\n        ];\n        const objectOptions = [\n            'narg',\n            'key',\n            'alias',\n            'default',\n            'defaultDescription',\n            'config',\n            'choices',\n            'demandedOptions',\n            'demandedCommands',\n            'coerce',\n            'deprecatedOptions',\n        ];\n        arrayOptions.forEach(k => {\n            tmpOptions[k] = (options[k] || []).filter((k) => !localLookup[k]);\n        });\n        objectOptions.forEach((k) => {\n            tmpOptions[k] = objFilter(options[k], k => !localLookup[k]);\n        });\n        tmpOptions.envPrefix = options.envPrefix;\n        options = tmpOptions;\n        usage = usage ? usage.reset(localLookup) : Usage(self, y18n, shim);\n        validation = validation\n            ? validation.reset(localLookup)\n            : Validation(self, usage, y18n, shim);\n        command = command\n            ? command.reset()\n            : Command(self, usage, validation, globalMiddleware, shim);\n        if (!completion)\n            completion = Completion(self, usage, command, shim);\n        completionCommand = null;\n        output = '';\n        exitError = null;\n        hasOutput = false;\n        self.parsed = false;\n        return self;\n    };\n    self.resetOptions();\n    const frozens = [];\n    function freeze() {\n        frozens.push({\n            options,\n            configObjects: options.configObjects.slice(0),\n            exitProcess,\n            groups,\n            strict,\n            strictCommands,\n            strictOptions,\n            completionCommand,\n            output,\n            exitError,\n            hasOutput,\n            parsed: self.parsed,\n            parseFn,\n            parseContext,\n            handlerFinishCommand,\n        });\n        usage.freeze();\n        validation.freeze();\n        command.freeze();\n    }\n    function unfreeze() {\n        const frozen = frozens.pop();\n        assertNotStrictEqual(frozen, undefined, shim);\n        let configObjects;\n        ({\n            options,\n            configObjects,\n            exitProcess,\n            groups,\n            output,\n            exitError,\n            hasOutput,\n            parsed: self.parsed,\n            strict,\n            strictCommands,\n            strictOptions,\n            completionCommand,\n            parseFn,\n            parseContext,\n            handlerFinishCommand,\n        } = frozen);\n        options.configObjects = configObjects;\n        usage.unfreeze();\n        validation.unfreeze();\n        command.unfreeze();\n    }\n    self.boolean = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('boolean', keys);\n        return self;\n    };\n    self.array = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('array', keys);\n        return self;\n    };\n    self.number = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('number', keys);\n        return self;\n    };\n    self.normalize = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('normalize', keys);\n        return self;\n    };\n    self.count = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('count', keys);\n        return self;\n    };\n    self.string = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('string', keys);\n        return self;\n    };\n    self.requiresArg = function (keys) {\n        argsert('<array|string|object> [number]', [keys], arguments.length);\n        if (typeof keys === 'string' && options.narg[keys]) {\n            return self;\n        }\n        else {\n            populateParserHintSingleValueDictionary(self.requiresArg, 'narg', keys, NaN);\n        }\n        return self;\n    };\n    self.skipValidation = function (keys) {\n        argsert('<array|string>', [keys], arguments.length);\n        populateParserHintArray('skipValidation', keys);\n        return self;\n    };\n    function populateParserHintArray(type, keys) {\n        keys = [].concat(keys);\n        keys.forEach(key => {\n            key = sanitizeKey(key);\n            options[type].push(key);\n        });\n    }\n    self.nargs = function (key, value) {\n        argsert('<string|object|array> [number]', [key, value], arguments.length);\n        populateParserHintSingleValueDictionary(self.nargs, 'narg', key, value);\n        return self;\n    };\n    self.choices = function (key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        populateParserHintArrayDictionary(self.choices, 'choices', key, value);\n        return self;\n    };\n    self.alias = function (key, value) {\n        argsert('<object|string|array> [string|array]', [key, value], arguments.length);\n        populateParserHintArrayDictionary(self.alias, 'alias', key, value);\n        return self;\n    };\n    self.default = self.defaults = function (key, value, defaultDescription) {\n        argsert('<object|string|array> [*] [string]', [key, value, defaultDescription], arguments.length);\n        if (defaultDescription) {\n            assertSingleKey(key, shim);\n            options.defaultDescription[key] = defaultDescription;\n        }\n        if (typeof value === 'function') {\n            assertSingleKey(key, shim);\n            if (!options.defaultDescription[key])\n                options.defaultDescription[key] = usage.functionDescription(value);\n            value = value.call();\n        }\n        populateParserHintSingleValueDictionary(self.default, 'default', key, value);\n        return self;\n    };\n    self.describe = function (key, desc) {\n        argsert('<object|string|array> [string]', [key, desc], arguments.length);\n        setKey(key, true);\n        usage.describe(key, desc);\n        return self;\n    };\n    function setKey(key, set) {\n        populateParserHintSingleValueDictionary(setKey, 'key', key, set);\n        return self;\n    }\n    function demandOption(keys, msg) {\n        argsert('<object|string|array> [string]', [keys, msg], arguments.length);\n        populateParserHintSingleValueDictionary(self.demandOption, 'demandedOptions', keys, msg);\n        return self;\n    }\n    self.demandOption = demandOption;\n    self.coerce = function (keys, value) {\n        argsert('<object|string|array> [function]', [keys, value], arguments.length);\n        populateParserHintSingleValueDictionary(self.coerce, 'coerce', keys, value);\n        return self;\n    };\n    function populateParserHintSingleValueDictionary(builder, type, key, value) {\n        populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n            options[type][key] = value;\n        });\n    }\n    function populateParserHintArrayDictionary(builder, type, key, value) {\n        populateParserHintDictionary(builder, type, key, value, (type, key, value) => {\n            options[type][key] = (options[type][key] || []).concat(value);\n        });\n    }\n    function populateParserHintDictionary(builder, type, key, value, singleKeyHandler) {\n        if (Array.isArray(key)) {\n            key.forEach(k => {\n                builder(k, value);\n            });\n        }\n        else if (((key) => typeof key === 'object')(key)) {\n            for (const k of objectKeys(key)) {\n                builder(k, key[k]);\n            }\n        }\n        else {\n            singleKeyHandler(type, sanitizeKey(key), value);\n        }\n    }\n    function sanitizeKey(key) {\n        if (key === '__proto__')\n            return '___proto___';\n        return key;\n    }\n    function deleteFromParserHintObject(optionKey) {\n        objectKeys(options).forEach((hintKey) => {\n            if (((key) => key === 'configObjects')(hintKey))\n                return;\n            const hint = options[hintKey];\n            if (Array.isArray(hint)) {\n                if (~hint.indexOf(optionKey))\n                    hint.splice(hint.indexOf(optionKey), 1);\n            }\n            else if (typeof hint === 'object') {\n                delete hint[optionKey];\n            }\n        });\n        delete usage.getDescriptions()[optionKey];\n    }\n    self.config = function config(key = 'config', msg, parseFn) {\n        argsert('[object|string] [string|function] [function]', [key, msg, parseFn], arguments.length);\n        if (typeof key === 'object' && !Array.isArray(key)) {\n            key = applyExtends(key, cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim);\n            options.configObjects = (options.configObjects || []).concat(key);\n            return self;\n        }\n        if (typeof msg === 'function') {\n            parseFn = msg;\n            msg = undefined;\n        }\n        self.describe(key, msg || usage.deferY18nLookup('Path to JSON config file'));\n        (Array.isArray(key) ? key : [key]).forEach(k => {\n            options.config[k] = parseFn || true;\n        });\n        return self;\n    };\n    self.example = function (cmd, description) {\n        argsert('<string|array> [string]', [cmd, description], arguments.length);\n        if (Array.isArray(cmd)) {\n            cmd.forEach(exampleParams => self.example(...exampleParams));\n        }\n        else {\n            usage.example(cmd, description);\n        }\n        return self;\n    };\n    self.command = function (cmd, description, builder, handler, middlewares, deprecated) {\n        argsert('<string|array|object> [string|boolean] [function|object] [function] [array] [boolean|string]', [cmd, description, builder, handler, middlewares, deprecated], arguments.length);\n        command.addHandler(cmd, description, builder, handler, middlewares, deprecated);\n        return self;\n    };\n    self.commandDir = function (dir, opts) {\n        argsert('<string> [object]', [dir, opts], arguments.length);\n        const req = parentRequire || shim.require;\n        command.addDirectory(dir, self.getContext(), req, shim.getCallerFile(), opts);\n        return self;\n    };\n    self.demand = self.required = self.require = function demand(keys, max, msg) {\n        if (Array.isArray(max)) {\n            max.forEach(key => {\n                assertNotStrictEqual(msg, true, shim);\n                demandOption(key, msg);\n            });\n            max = Infinity;\n        }\n        else if (typeof max !== 'number') {\n            msg = max;\n            max = Infinity;\n        }\n        if (typeof keys === 'number') {\n            assertNotStrictEqual(msg, true, shim);\n            self.demandCommand(keys, max, msg, msg);\n        }\n        else if (Array.isArray(keys)) {\n            keys.forEach(key => {\n                assertNotStrictEqual(msg, true, shim);\n                demandOption(key, msg);\n            });\n        }\n        else {\n            if (typeof msg === 'string') {\n                demandOption(keys, msg);\n            }\n            else if (msg === true || typeof msg === 'undefined') {\n                demandOption(keys);\n            }\n        }\n        return self;\n    };\n    self.demandCommand = function demandCommand(min = 1, max, minMsg, maxMsg) {\n        argsert('[number] [number|string] [string|null|undefined] [string|null|undefined]', [min, max, minMsg, maxMsg], arguments.length);\n        if (typeof max !== 'number') {\n            minMsg = max;\n            max = Infinity;\n        }\n        self.global('_', false);\n        options.demandedCommands._ = {\n            min,\n            max,\n            minMsg,\n            maxMsg,\n        };\n        return self;\n    };\n    self.getDemandedOptions = () => {\n        argsert([], 0);\n        return options.demandedOptions;\n    };\n    self.getDemandedCommands = () => {\n        argsert([], 0);\n        return options.demandedCommands;\n    };\n    self.deprecateOption = function deprecateOption(option, message) {\n        argsert('<string> [string|boolean]', [option, message], arguments.length);\n        options.deprecatedOptions[option] = message;\n        return self;\n    };\n    self.getDeprecatedOptions = () => {\n        argsert([], 0);\n        return options.deprecatedOptions;\n    };\n    self.implies = function (key, value) {\n        argsert('<string|object> [number|string|array]', [key, value], arguments.length);\n        validation.implies(key, value);\n        return self;\n    };\n    self.conflicts = function (key1, key2) {\n        argsert('<string|object> [string|array]', [key1, key2], arguments.length);\n        validation.conflicts(key1, key2);\n        return self;\n    };\n    self.usage = function (msg, description, builder, handler) {\n        argsert('<string|null|undefined> [string|boolean] [function|object] [function]', [msg, description, builder, handler], arguments.length);\n        if (description !== undefined) {\n            assertNotStrictEqual(msg, null, shim);\n            if ((msg || '').match(/^\\$0( |$)/)) {\n                return self.command(msg, description, builder, handler);\n            }\n            else {\n                throw new YError('.usage() description must start with $0 if being used as alias for .command()');\n            }\n        }\n        else {\n            usage.usage(msg);\n            return self;\n        }\n    };\n    self.epilogue = self.epilog = function (msg) {\n        argsert('<string>', [msg], arguments.length);\n        usage.epilog(msg);\n        return self;\n    };\n    self.fail = function (f) {\n        argsert('<function>', [f], arguments.length);\n        usage.failFn(f);\n        return self;\n    };\n    self.onFinishCommand = function (f) {\n        argsert('<function>', [f], arguments.length);\n        handlerFinishCommand = f;\n        return self;\n    };\n    self.getHandlerFinishCommand = () => handlerFinishCommand;\n    self.check = function (f, _global) {\n        argsert('<function> [boolean]', [f, _global], arguments.length);\n        validation.check(f, _global !== false);\n        return self;\n    };\n    self.global = function global(globals, global) {\n        argsert('<string|array> [boolean]', [globals, global], arguments.length);\n        globals = [].concat(globals);\n        if (global !== false) {\n            options.local = options.local.filter(l => globals.indexOf(l) === -1);\n        }\n        else {\n            globals.forEach(g => {\n                if (options.local.indexOf(g) === -1)\n                    options.local.push(g);\n            });\n        }\n        return self;\n    };\n    self.pkgConf = function pkgConf(key, rootPath) {\n        argsert('<string> [string]', [key, rootPath], arguments.length);\n        let conf = null;\n        const obj = pkgUp(rootPath || cwd);\n        if (obj[key] && typeof obj[key] === 'object') {\n            conf = applyExtends(obj[key], rootPath || cwd, self.getParserConfiguration()['deep-merge-config'] || false, shim);\n            options.configObjects = (options.configObjects || []).concat(conf);\n        }\n        return self;\n    };\n    const pkgs = {};\n    function pkgUp(rootPath) {\n        const npath = rootPath || '*';\n        if (pkgs[npath])\n            return pkgs[npath];\n        let obj = {};\n        try {\n            let startDir = rootPath || shim.mainFilename;\n            if (!rootPath && shim.path.extname(startDir)) {\n                startDir = shim.path.dirname(startDir);\n            }\n            const pkgJsonPath = shim.findUp(startDir, (dir, names) => {\n                if (names.includes('package.json')) {\n                    return 'package.json';\n                }\n                else {\n                    return undefined;\n                }\n            });\n            assertNotStrictEqual(pkgJsonPath, undefined, shim);\n            obj = JSON.parse(shim.readFileSync(pkgJsonPath, 'utf8'));\n        }\n        catch (_noop) { }\n        pkgs[npath] = obj || {};\n        return pkgs[npath];\n    }\n    let parseFn = null;\n    let parseContext = null;\n    self.parse = function parse(args, shortCircuit, _parseFn) {\n        argsert('[string|array] [function|boolean|object] [function]', [args, shortCircuit, _parseFn], arguments.length);\n        freeze();\n        if (typeof args === 'undefined') {\n            const argv = self._parseArgs(processArgs);\n            const tmpParsed = self.parsed;\n            unfreeze();\n            self.parsed = tmpParsed;\n            return argv;\n        }\n        if (typeof shortCircuit === 'object') {\n            parseContext = shortCircuit;\n            shortCircuit = _parseFn;\n        }\n        if (typeof shortCircuit === 'function') {\n            parseFn = shortCircuit;\n            shortCircuit = false;\n        }\n        if (!shortCircuit)\n            processArgs = args;\n        if (parseFn)\n            exitProcess = false;\n        const parsed = self._parseArgs(args, !!shortCircuit);\n        completion.setParsed(self.parsed);\n        if (parseFn)\n            parseFn(exitError, parsed, output);\n        unfreeze();\n        return parsed;\n    };\n    self._getParseContext = () => parseContext || {};\n    self._hasParseCallback = () => !!parseFn;\n    self.option = self.options = function option(key, opt) {\n        argsert('<string|object> [object]', [key, opt], arguments.length);\n        if (typeof key === 'object') {\n            Object.keys(key).forEach(k => {\n                self.options(k, key[k]);\n            });\n        }\n        else {\n            if (typeof opt !== 'object') {\n                opt = {};\n            }\n            options.key[key] = true;\n            if (opt.alias)\n                self.alias(key, opt.alias);\n            const deprecate = opt.deprecate || opt.deprecated;\n            if (deprecate) {\n                self.deprecateOption(key, deprecate);\n            }\n            const demand = opt.demand || opt.required || opt.require;\n            if (demand) {\n                self.demand(key, demand);\n            }\n            if (opt.demandOption) {\n                self.demandOption(key, typeof opt.demandOption === 'string' ? opt.demandOption : undefined);\n            }\n            if (opt.conflicts) {\n                self.conflicts(key, opt.conflicts);\n            }\n            if ('default' in opt) {\n                self.default(key, opt.default);\n            }\n            if (opt.implies !== undefined) {\n                self.implies(key, opt.implies);\n            }\n            if (opt.nargs !== undefined) {\n                self.nargs(key, opt.nargs);\n            }\n            if (opt.config) {\n                self.config(key, opt.configParser);\n            }\n            if (opt.normalize) {\n                self.normalize(key);\n            }\n            if (opt.choices) {\n                self.choices(key, opt.choices);\n            }\n            if (opt.coerce) {\n                self.coerce(key, opt.coerce);\n            }\n            if (opt.group) {\n                self.group(key, opt.group);\n            }\n            if (opt.boolean || opt.type === 'boolean') {\n                self.boolean(key);\n                if (opt.alias)\n                    self.boolean(opt.alias);\n            }\n            if (opt.array || opt.type === 'array') {\n                self.array(key);\n                if (opt.alias)\n                    self.array(opt.alias);\n            }\n            if (opt.number || opt.type === 'number') {\n                self.number(key);\n                if (opt.alias)\n                    self.number(opt.alias);\n            }\n            if (opt.string || opt.type === 'string') {\n                self.string(key);\n                if (opt.alias)\n                    self.string(opt.alias);\n            }\n            if (opt.count || opt.type === 'count') {\n                self.count(key);\n            }\n            if (typeof opt.global === 'boolean') {\n                self.global(key, opt.global);\n            }\n            if (opt.defaultDescription) {\n                options.defaultDescription[key] = opt.defaultDescription;\n            }\n            if (opt.skipValidation) {\n                self.skipValidation(key);\n            }\n            const desc = opt.describe || opt.description || opt.desc;\n            self.describe(key, desc);\n            if (opt.hidden) {\n                self.hide(key);\n            }\n            if (opt.requiresArg) {\n                self.requiresArg(key);\n            }\n        }\n        return self;\n    };\n    self.getOptions = () => options;\n    self.positional = function (key, opts) {\n        argsert('<string> <object>', [key, opts], arguments.length);\n        if (context.resets === 0) {\n            throw new YError(\".positional() can only be called in a command's builder function\");\n        }\n        const supportedOpts = [\n            'default',\n            'defaultDescription',\n            'implies',\n            'normalize',\n            'choices',\n            'conflicts',\n            'coerce',\n            'type',\n            'describe',\n            'desc',\n            'description',\n            'alias',\n        ];\n        opts = objFilter(opts, (k, v) => {\n            let accept = supportedOpts.indexOf(k) !== -1;\n            if (k === 'type' && ['string', 'number', 'boolean'].indexOf(v) === -1)\n                accept = false;\n            return accept;\n        });\n        const fullCommand = context.fullCommands[context.fullCommands.length - 1];\n        const parseOptions = fullCommand\n            ? command.cmdToParseOptions(fullCommand)\n            : {\n                array: [],\n                alias: {},\n                default: {},\n                demand: {},\n            };\n        objectKeys(parseOptions).forEach(pk => {\n            const parseOption = parseOptions[pk];\n            if (Array.isArray(parseOption)) {\n                if (parseOption.indexOf(key) !== -1)\n                    opts[pk] = true;\n            }\n            else {\n                if (parseOption[key] && !(pk in opts))\n                    opts[pk] = parseOption[key];\n            }\n        });\n        self.group(key, usage.getPositionalGroupName());\n        return self.option(key, opts);\n    };\n    self.group = function group(opts, groupName) {\n        argsert('<string|array> <string>', [opts, groupName], arguments.length);\n        const existing = preservedGroups[groupName] || groups[groupName];\n        if (preservedGroups[groupName]) {\n            delete preservedGroups[groupName];\n        }\n        const seen = {};\n        groups[groupName] = (existing || []).concat(opts).filter(key => {\n            if (seen[key])\n                return false;\n            return (seen[key] = true);\n        });\n        return self;\n    };\n    self.getGroups = () => Object.assign({}, groups, preservedGroups);\n    self.env = function (prefix) {\n        argsert('[string|boolean]', [prefix], arguments.length);\n        if (prefix === false)\n            delete options.envPrefix;\n        else\n            options.envPrefix = prefix || '';\n        return self;\n    };\n    self.wrap = function (cols) {\n        argsert('<number|null|undefined>', [cols], arguments.length);\n        usage.wrap(cols);\n        return self;\n    };\n    let strict = false;\n    self.strict = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strict = enabled !== false;\n        return self;\n    };\n    self.getStrict = () => strict;\n    let strictCommands = false;\n    self.strictCommands = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strictCommands = enabled !== false;\n        return self;\n    };\n    self.getStrictCommands = () => strictCommands;\n    let strictOptions = false;\n    self.strictOptions = function (enabled) {\n        argsert('[boolean]', [enabled], arguments.length);\n        strictOptions = enabled !== false;\n        return self;\n    };\n    self.getStrictOptions = () => strictOptions;\n    let parserConfig = {};\n    self.parserConfiguration = function parserConfiguration(config) {\n        argsert('<object>', [config], arguments.length);\n        parserConfig = config;\n        return self;\n    };\n    self.getParserConfiguration = () => parserConfig;\n    self.showHelp = function (level) {\n        argsert('[string|function]', [level], arguments.length);\n        if (!self.parsed)\n            self._parseArgs(processArgs);\n        if (command.hasDefaultCommand()) {\n            context.resets++;\n            command.runDefaultBuilderOn(self);\n        }\n        usage.showHelp(level);\n        return self;\n    };\n    let versionOpt = null;\n    self.version = function version(opt, msg, ver) {\n        const defaultVersionOpt = 'version';\n        argsert('[boolean|string] [string] [string]', [opt, msg, ver], arguments.length);\n        if (versionOpt) {\n            deleteFromParserHintObject(versionOpt);\n            usage.version(undefined);\n            versionOpt = null;\n        }\n        if (arguments.length === 0) {\n            ver = guessVersion();\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 1) {\n            if (opt === false) {\n                return self;\n            }\n            ver = opt;\n            opt = defaultVersionOpt;\n        }\n        else if (arguments.length === 2) {\n            ver = msg;\n            msg = undefined;\n        }\n        versionOpt = typeof opt === 'string' ? opt : defaultVersionOpt;\n        msg = msg || usage.deferY18nLookup('Show version number');\n        usage.version(ver || undefined);\n        self.boolean(versionOpt);\n        self.describe(versionOpt, msg);\n        return self;\n    };\n    function guessVersion() {\n        const obj = pkgUp();\n        return obj.version || 'unknown';\n    }\n    let helpOpt = null;\n    self.addHelpOpt = self.help = function addHelpOpt(opt, msg) {\n        const defaultHelpOpt = 'help';\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (helpOpt) {\n            deleteFromParserHintObject(helpOpt);\n            helpOpt = null;\n        }\n        if (arguments.length === 1) {\n            if (opt === false)\n                return self;\n        }\n        helpOpt = typeof opt === 'string' ? opt : defaultHelpOpt;\n        self.boolean(helpOpt);\n        self.describe(helpOpt, msg || usage.deferY18nLookup('Show help'));\n        return self;\n    };\n    const defaultShowHiddenOpt = 'show-hidden';\n    options.showHiddenOpt = defaultShowHiddenOpt;\n    self.addShowHiddenOpt = self.showHidden = function addShowHiddenOpt(opt, msg) {\n        argsert('[string|boolean] [string]', [opt, msg], arguments.length);\n        if (arguments.length === 1) {\n            if (opt === false)\n                return self;\n        }\n        const showHiddenOpt = typeof opt === 'string' ? opt : defaultShowHiddenOpt;\n        self.boolean(showHiddenOpt);\n        self.describe(showHiddenOpt, msg || usage.deferY18nLookup('Show hidden options'));\n        options.showHiddenOpt = showHiddenOpt;\n        return self;\n    };\n    self.hide = function hide(key) {\n        argsert('<string>', [key], arguments.length);\n        options.hiddenOptions.push(key);\n        return self;\n    };\n    self.showHelpOnFail = function showHelpOnFail(enabled, message) {\n        argsert('[boolean|string] [string]', [enabled, message], arguments.length);\n        usage.showHelpOnFail(enabled, message);\n        return self;\n    };\n    let exitProcess = true;\n    self.exitProcess = function (enabled = true) {\n        argsert('[boolean]', [enabled], arguments.length);\n        exitProcess = enabled;\n        return self;\n    };\n    self.getExitProcess = () => exitProcess;\n    self.showCompletionScript = function ($0, cmd) {\n        argsert('[string] [string]', [$0, cmd], arguments.length);\n        $0 = $0 || self.$0;\n        _logger.log(completion.generateCompletionScript($0, cmd || completionCommand || 'completion'));\n        return self;\n    };\n    self.getCompletion = function (args, done) {\n        argsert('<array> <function>', [args, done], arguments.length);\n        completion.getCompletion(args, done);\n    };\n    self.locale = function (locale) {\n        argsert('[string]', [locale], arguments.length);\n        if (!locale) {\n            guessLocale();\n            return y18n.getLocale();\n        }\n        detectLocale = false;\n        y18n.setLocale(locale);\n        return self;\n    };\n    self.updateStrings = self.updateLocale = function (obj) {\n        argsert('<object>', [obj], arguments.length);\n        detectLocale = false;\n        y18n.updateLocale(obj);\n        return self;\n    };\n    let detectLocale = true;\n    self.detectLocale = function (detect) {\n        argsert('<boolean>', [detect], arguments.length);\n        detectLocale = detect;\n        return self;\n    };\n    self.getDetectLocale = () => detectLocale;\n    const _logger = {\n        log(...args) {\n            if (!self._hasParseCallback())\n                console.log(...args);\n            hasOutput = true;\n            if (output.length)\n                output += '\\n';\n            output += args.join(' ');\n        },\n        error(...args) {\n            if (!self._hasParseCallback())\n                console.error(...args);\n            hasOutput = true;\n            if (output.length)\n                output += '\\n';\n            output += args.join(' ');\n        },\n    };\n    self._getLoggerInstance = () => _logger;\n    self._hasOutput = () => hasOutput;\n    self._setHasOutput = () => {\n        hasOutput = true;\n    };\n    let recommendCommands;\n    self.recommendCommands = function (recommend = true) {\n        argsert('[boolean]', [recommend], arguments.length);\n        recommendCommands = recommend;\n        return self;\n    };\n    self.getUsageInstance = () => usage;\n    self.getValidationInstance = () => validation;\n    self.getCommandInstance = () => command;\n    self.terminalWidth = () => {\n        argsert([], 0);\n        return shim.process.stdColumns;\n    };\n    Object.defineProperty(self, 'argv', {\n        get: () => self._parseArgs(processArgs),\n        enumerable: true,\n    });\n    self._parseArgs = function parseArgs(args, shortCircuit, _calledFromCommand, commandIndex) {\n        let skipValidation = !!_calledFromCommand;\n        args = args || processArgs;\n        options.__ = y18n.__;\n        options.configuration = self.getParserConfiguration();\n        const populateDoubleDash = !!options.configuration['populate--'];\n        const config = Object.assign({}, options.configuration, {\n            'populate--': true,\n        });\n        const parsed = shim.Parser.detailed(args, Object.assign({}, options, {\n            configuration: Object.assign({ 'parse-positional-numbers': false }, config),\n        }));\n        let argv = parsed.argv;\n        if (parseContext)\n            argv = Object.assign({}, argv, parseContext);\n        const aliases = parsed.aliases;\n        argv.$0 = self.$0;\n        self.parsed = parsed;\n        try {\n            guessLocale();\n            if (shortCircuit) {\n                return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n            }\n            if (helpOpt) {\n                const helpCmds = [helpOpt]\n                    .concat(aliases[helpOpt] || [])\n                    .filter(k => k.length > 1);\n                if (~helpCmds.indexOf('' + argv._[argv._.length - 1])) {\n                    argv._.pop();\n                    argv[helpOpt] = true;\n                }\n            }\n            const handlerKeys = command.getCommands();\n            const requestCompletions = completion.completionKey in argv;\n            const skipRecommendation = argv[helpOpt] || requestCompletions;\n            const skipDefaultCommand = skipRecommendation &&\n                (handlerKeys.length > 1 || handlerKeys[0] !== '$0');\n            if (argv._.length) {\n                if (handlerKeys.length) {\n                    let firstUnknownCommand;\n                    for (let i = commandIndex || 0, cmd; argv._[i] !== undefined; i++) {\n                        cmd = String(argv._[i]);\n                        if (~handlerKeys.indexOf(cmd) && cmd !== completionCommand) {\n                            const innerArgv = command.runCommand(cmd, self, parsed, i + 1);\n                            return self._postProcess(innerArgv, populateDoubleDash);\n                        }\n                        else if (!firstUnknownCommand && cmd !== completionCommand) {\n                            firstUnknownCommand = cmd;\n                            break;\n                        }\n                    }\n                    if (command.hasDefaultCommand() && !skipDefaultCommand) {\n                        const innerArgv = command.runCommand(null, self, parsed);\n                        return self._postProcess(innerArgv, populateDoubleDash);\n                    }\n                    if (recommendCommands && firstUnknownCommand && !skipRecommendation) {\n                        validation.recommendCommands(firstUnknownCommand, handlerKeys);\n                    }\n                }\n                if (completionCommand &&\n                    ~argv._.indexOf(completionCommand) &&\n                    !requestCompletions) {\n                    if (exitProcess)\n                        setBlocking(true);\n                    self.showCompletionScript();\n                    self.exit(0);\n                }\n            }\n            else if (command.hasDefaultCommand() && !skipDefaultCommand) {\n                const innerArgv = command.runCommand(null, self, parsed);\n                return self._postProcess(innerArgv, populateDoubleDash);\n            }\n            if (requestCompletions) {\n                if (exitProcess)\n                    setBlocking(true);\n                args = [].concat(args);\n                const completionArgs = args.slice(args.indexOf(`--${completion.completionKey}`) + 1);\n                completion.getCompletion(completionArgs, completions => {\n                    (completions || []).forEach(completion => {\n                        _logger.log(completion);\n                    });\n                    self.exit(0);\n                });\n                return self._postProcess(argv, !populateDoubleDash, _calledFromCommand);\n            }\n            if (!hasOutput) {\n                Object.keys(argv).forEach(key => {\n                    if (key === helpOpt && argv[key]) {\n                        if (exitProcess)\n                            setBlocking(true);\n                        skipValidation = true;\n                        self.showHelp('log');\n                        self.exit(0);\n                    }\n                    else if (key === versionOpt && argv[key]) {\n                        if (exitProcess)\n                            setBlocking(true);\n                        skipValidation = true;\n                        usage.showVersion();\n                        self.exit(0);\n                    }\n                });\n            }\n            if (!skipValidation && options.skipValidation.length > 0) {\n                skipValidation = Object.keys(argv).some(key => options.skipValidation.indexOf(key) >= 0 && argv[key] === true);\n            }\n            if (!skipValidation) {\n                if (parsed.error)\n                    throw new YError(parsed.error.message);\n                if (!requestCompletions) {\n                    self._runValidation(argv, aliases, {}, parsed.error);\n                }\n            }\n        }\n        catch (err) {\n            if (err instanceof YError)\n                usage.fail(err.message, err);\n            else\n                throw err;\n        }\n        return self._postProcess(argv, populateDoubleDash, _calledFromCommand);\n    };\n    self._postProcess = function (argv, populateDoubleDash, calledFromCommand = false) {\n        if (isPromise(argv))\n            return argv;\n        if (calledFromCommand)\n            return argv;\n        if (!populateDoubleDash) {\n            argv = self._copyDoubleDash(argv);\n        }\n        const parsePositionalNumbers = self.getParserConfiguration()['parse-positional-numbers'] ||\n            self.getParserConfiguration()['parse-positional-numbers'] === undefined;\n        if (parsePositionalNumbers) {\n            argv = self._parsePositionalNumbers(argv);\n        }\n        return argv;\n    };\n    self._copyDoubleDash = function (argv) {\n        if (!argv._ || !argv['--'])\n            return argv;\n        argv._.push.apply(argv._, argv['--']);\n        try {\n            delete argv['--'];\n        }\n        catch (_err) { }\n        return argv;\n    };\n    self._parsePositionalNumbers = function (argv) {\n        const args = argv['--'] ? argv['--'] : argv._;\n        for (let i = 0, arg; (arg = args[i]) !== undefined; i++) {\n            if (shim.Parser.looksLikeNumber(arg) &&\n                Number.isSafeInteger(Math.floor(parseFloat(`${arg}`)))) {\n                args[i] = Number(arg);\n            }\n        }\n        return argv;\n    };\n    self._runValidation = function runValidation(argv, aliases, positionalMap, parseErrors, isDefaultCommand = false) {\n        if (parseErrors)\n            throw new YError(parseErrors.message);\n        validation.nonOptionCount(argv);\n        validation.requiredArguments(argv);\n        let failedStrictCommands = false;\n        if (strictCommands) {\n            failedStrictCommands = validation.unknownCommands(argv);\n        }\n        if (strict && !failedStrictCommands) {\n            validation.unknownArguments(argv, aliases, positionalMap, isDefaultCommand);\n        }\n        else if (strictOptions) {\n            validation.unknownArguments(argv, aliases, {}, false, false);\n        }\n        validation.customChecks(argv, aliases);\n        validation.limitedChoices(argv);\n        validation.implications(argv);\n        validation.conflicting(argv);\n    };\n    function guessLocale() {\n        if (!detectLocale)\n            return;\n        const locale = shim.getEnv('LC_ALL') ||\n            shim.getEnv('LC_MESSAGES') ||\n            shim.getEnv('LANG') ||\n            shim.getEnv('LANGUAGE') ||\n            'en_US';\n        self.locale(locale.replace(/[.:].*/, ''));\n    }\n    self.help();\n    self.version();\n    return self;\n}\nexport const rebase = (base, dir) => shim.path.relative(base, dir);\nexport function isYargsInstance(y) {\n    return !!y && typeof y._parseArgs === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}